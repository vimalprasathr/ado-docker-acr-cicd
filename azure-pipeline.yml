variables: 
  serviceConnectionDev: 'dev-germanywestcentral-sc-arm'  # Azure RM service connection name for Build and Deploy
  serviceConnectionDes: 'dev-des-sc-arm'  # Azure RM service connection name for Import
  containerRegistryNameDev: 'acradosampledev'
  containerRegistryNameImportDev: 'acrimportdev'  # New variable for the destination ACR in DEV
  imageBaseName: hello-world
  imageNameDev: "$(containerRegistryNameDev).azurecr.io/$(imageBaseName):$(Build.BuildId)"
  imageNameImportDev: "$(containerRegistryNameImportDev).azurecr.io/$(imageBaseName):$(Build.BuildId)"

  # These should be stored as secret variables in Azure DevOps pipeline
  acrUsernameDev: $(ACR_DEV_USERNAME)   # Dev ACR admin username
  acrPasswordDev: $(ACR_DEV_PASSWORD)   # Dev ACR admin password
  acrUsernameImportDev: $(ACR_IMPORT_USERNAME)  # Import ACR admin username
  acrPasswordImportDev: $(ACR_IMPORT_PASSWORD)  # Import ACR admin password

trigger:
  branches:
    include:
    - main

stages:
- stage: Build
  pool:
    vmImage: ubuntu-20.04

  jobs:
  - job: build
    displayName: Build
    steps:
    - task: AzureCLI@2
      displayName: Login to DEV ACR using Admin Credentials
      inputs:
        connectedServiceNameARM: $(serviceConnectionDev)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az acr login --name $(containerRegistryNameDev) --username $(acrUsernameDev) --password $(acrPasswordDev)

    - task: AzureCLI@2
      displayName: Build and Push to DEV ACR
      inputs:
        connectedServiceNameARM: $(serviceConnectionDev)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          docker build -t $(imageNameDev) .
          docker push $(imageNameDev)

- stage: DeployToDev
  dependsOn: Build
  condition: succeeded()
  displayName: Deploy to Dev
  pool:
    vmImage: ubuntu-20.04

  jobs:
  - job: deploy
    steps:
    - script: echo "Here you can deploy the container to your favorite target. For example, AKS, ACI, ACA, or Azure Web App for Containers."
      displayName: Deploy container to target platform

- stage: ImportToDev
  dependsOn: Build
  condition: succeeded()
  displayName: Import Image to another DEV ACR
  pool:
    vmImage: ubuntu-20.04

  jobs:
  - job: importToDevAcr
    displayName: Import Image to Import ACR in DEV
    steps:
    - task: AzureCLI@2
      displayName: Login to Import ACR using Admin Credentials
      inputs:
        connectedServiceNameARM: $(serviceConnectionDes)  # Use the second service connection here
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az acr login --name $(containerRegistryNameImportDev) --username $(acrUsernameImportDev) --password $(acrPasswordImportDev)

    - task: AzureCLI@2
      displayName: Import Image to another DEV ACR
      inputs:
        connectedServiceNameARM: $(serviceConnectionDes)  # Use the second service connection here
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          sourceImage="$(containerRegistryNameDev).azurecr.io/$(imageBaseName):$(Build.BuildId)"
          destinationImage="$(containerRegistryNameImportDev).azurecr.io/$(imageBaseName):$(Build.BuildId)"
          
          az acr import \
          --name $(containerRegistryNameImportDev) \
          --source $sourceImage \
          --image $destinationImage
